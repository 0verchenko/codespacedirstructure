#!/bin/bash
# @@ AVID HEADER - DO NOT EDIT @@
# Copyright 2017-2018 by Avid Technology, Inc.
# @@ AVID HEADER @@


this_dir="$(cd "$(dirname "$0")" && pwd)"
script_name="$(basename "$0")"

log_file=$0'.log'
# Duplicate all output to the log file as well as to the tty.
# This also disables terminal color chars (color) in the log file.
exec &> >(tee >(sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" >>$log_file))
. $this_dir/avid-bits/version

bold=$(tput bold)
normal=$(tput sgr0)

to_log()
{
    echo $@ | systemd-cat -t $script_name -p info
    echo "$(date +'%b %d %H:%M:%S') $@"
}

trap_with_arg() {
    func="$1" ; shift
    for sig ; do
        trap "$func $sig" "$sig"
    done
}

func_trap() {
    echo "Trapped signal: $1"
}

trap_with_arg func_trap INT TERM EXIT HUP QUIT ILL ABRT SEGV PIPE USR1 STOP

proceed_update()
{
    while :
       do
        echo "Possible options:"
        echo "(1) Proceed with update (turn drives off, put all nodes into standby)"
        echo "(2) Finalize updates (turn drives on, put all nodes back online)"
        echo "(3) Exit"
        echo -n "Your selection (1,2,3): "
        read answer

        case "$answer" in
             "1")
                 to_log "Selected option: 1) Proceed with update"
                 put_all_nodes_into_standby
                 disable_drives
                 break  ;;
             "2")
                 to_log "Selected option: 2) Finalize updates"
                 finalize
                 exit 0 ;;
             "3")
                to_log "Selected option: 3) Exit"
                exit 0  ;;
              *)
                echo "Invalid input. Select any of (1, 2, 3)" ;;
        esac
    done
}

put_all_nodes_into_standby()
{
    to_log "Putting all nodes into standby..."
    crm node standby node-0
    crm node standby node-1

    # Give some time for the nodes to be put in "standby" mode
    while : ; do
        if ! crm_mon -1 | grep -q "Started"; then
            break
        fi
        sleep 1
    done
    to_log "All nodes in a standby mode"
}

put_all_nodes_back_online()
{
    to_log "Putting all nodes back online..."
    crm node online node-0
    crm node online node-1
    to_log "All nodes online"
}

cleanup_failcounts()
{
    to_log "Resetting counters..."
    /usr/sbin/crm_resource  --cleanup
    rc=$?
    if [ "$rc" -ne "0" ]; then
        to_log "ERROR: /usr/sbin/crm_resource returned $rc"
        exit 1
    fi
    to_log "Counters cleared"
}

disable_drives()
{
    to_log "Disabling drives..."
    # Wait until all drives are disabled
    $this_dir/avid-bits/drivemgr.py --all_off
    rc=$?
    if [ "$rc" -ne "0" ]; then
        to_log "ERROR: avid-bits/drivemgr.py returned $rc"
        exit 1
    fi
    to_log "Drives disabled"
}

enable_drives()
{
    to_log "Enabling drives..."
    # Wait until all drives are fully enabled
    $this_dir/avid-bits/drivemgr.py --all_on --timeout 60
    rc=$?
    if [ $rc -ne 0 ]; then
        to_log "Warning: avid-bits/drivemgr.py returned $rc"
        if [ $rc -eq 7 ]; then
            echo -n "Not all the drives are back online! Ignore and continue (y) or exit (n)?"
            while :
             do
                read answer
                case "$answer" in
                    "y") break  ;;
                    "n") exit 1 ;;
                    *)
                        echo "Invalid input. Type 'y' or 'n' for exit" ;;
                 esac
            done
        fi
    fi
    to_log "Drives enabled"
}

seagate_usm()
{
    to_log "${FUNCNAME}(): start"
    local product_name="$(dmidecode -s system-product-name)"
    [ "$product_name" != "Laguna Seca" ] && { echo 'INFO: not "Laguna Seca"'; exit 1; }

    # Seagate's tool dosn't show help without agruments
    local args="$@"
    if [ -z "$args" ]; then
        local args="-h"
    fi

    # Seagate requires to run this script from its directory ...
    pushd ${this_dir}/seagate/laguna-seca/fwtool-usm

    if [ "$args" == "--showsystems" ]; then
        ./descriptor.py -f ${this_dir}/seagate/laguna-seca/fwtool-usm/avid_nexis_v0.1_configuration_descriptor.xml --showsystems
        exit $?
    fi

    # Stop HA resources before the update
    if echo "$args" | grep -q -- "--perform_update"; then
        ./fwtool.py $args --compare_versions
        to_log "fwtool.py return code: $?"
        proceed_update
    fi
    ./fwtool.py $args
    rc=$?
    if [ "$rc" -ne "0" ]; then
        to_log "fwtool.py returned code: $rc"
        exit 1
    fi
    to_log "${FUNCNAME}(): done"
    exit $?
}

seagate_3rd_party()
{
    to_log "seagate_3rd_party(): start"
    local args="$@"

    # Stop HA resources before the update
    if echo "$args" | grep -q -- "--update"; then
        proceed_update
    fi
    echo $args
    ${this_dir}/seagate-avid-bits/updater-3rd-party-firmware $args
    rc=$?
    if [ "$rc" -ne "0" ]; then
        to_log "WARNING: updater-3rd-party-firmware returned $rc"
        exit 1
    fi
    to_log "${FUNCNAME}(): done"
    exit $?
}

finalize()
{
    put_all_nodes_into_standby
    enable_drives
    cleanup_failcounts
    put_all_nodes_back_online
}

usage()
{
    cat << EOF

${bold}Steps to update Firmware:${normal}

    1. Update USM components
    2. Update 3rd party components


=====================================
    ${bold}1. Update USM components${normal}
=====================================

    ${bold}Don't update two controllers at the same time.${normal}

    1.1. Start with updating the controller in slot-0 (some components can be updatet only from there).

    1.2. Figure out which '--system_index' parameter to use for the particular AVID NEXIS:

        $script_name seagate-usm --showsystems

    1.3. Start the update process (replace 'n' with system index):

        $script_name seagate-usm -c --target=auto --system_index=n --perform_updates

        1.3.1. Ensure that components are not updated:
            fwtool.py::SUCCESS: Mismatch count: NOT equal to 0

    1.4. Choose one of the available options:

        1.4.1. Proceed with update:
            All metadata(system) and media drives will be powered off.
            The system may reboot during the update without any notification.
            Check your 'ssh' session to see if/when the system has rebooted.
            Run the script and choose Finalize option when all updates are completed.

        1.4.2. Finalize:            	
            All metadata(system) and media drives will be powered on.
            Ensure that all components are updated and only then put the system online.
            

        1.4.3. Exit script
            


    1.5. Repeat step 1.3 until you see the following message:

            fwtool.py::SUCCESS: Mismatch count: 0

    1.6. Repeat all above steps for the controller in slot-1.

    1.7. Power on drives and turn put nodes back online by running step 1.4 and choosing "Finalize" option


    ${bold}NOTE:${normal} to just check the current installed versions of USM firmware, do:

        $script_name seagate-usm -c --target=auto --system_index=n --compare_versions


=====================================
    ${bold}2. Update 3rd party components${normal}
=====================================

    2.1. Run this command to update all 3rd party components:

        $script_name seagate-3rd-party --update-all

    2.2. Choose one of the available options:

        2.2.1 Proceed with update:
            All metadata(system) and media drives will be powered off.
            The system may reboot during the update without any notification.
            Check your 'ssh' session to see if/when the system has rebooted.
            Run the script and choose Finalize option when all updates are completed.

        2.2.2 Finalize:
            All metadata(system) and media drives will be powered on.
            Ensure that all components are updated and only then put the system online.

        2.2.3 Exit script
            



    2.3. Repeat step "2.1" till you see all components are up to date.

    2.4. Power on drives and turn put nodes back online by running step 2.1 and choosing "Finalize" option.


=====================================
${bold}Other options:${normal}

    --expert-help       Show some additional info
    -V                  Show version

EOF
}

expert_help()
{
    cat << EOF
Usage: $script_name [<component>|<key>]

Components:
    seagate-usm             Update USM, 'Laguna Seca' only
    seagate-3rd-party       Update 3rd party components (e.g. IDT retimer, PCIe eeprom)

Keys:
    -V                      Show version

EOF
}


[ "$#" -eq 0 ] && { usage; exit 1; }

to_log "firmware-updater started with args: $@"

while [ "$#" -gt 0 ]; do
    case "$1" in
        seagate-usm) shift && seagate_usm "$@";;
        seagate-3rd-party) shift && seagate_3rd_party "$@";;

        --expert-help) expert_help && exit 0;;
        -h) usage && exit 0;;
        -V) echo "$script_name v${updater_version}" && exit 0;;
        *) usage && exit 1;;
    esac
    shift
done
